#include<stdio.h>
#include<stdlib.h>
#include<string.h>
struct info
{
        char name[20];
        char num[20];
        char sex;
        int chinese;
        int math;
        int english;
        float average;
        struct info * next;
};
void create(struct info **);
void print(struct info *);
void ruber_table(struct info**);
void ruber_item(struct info**);
void insert_item(struct info**);
void average(struct info*);
void sort_table(struct info**);
int main()
{
        int n=0;
        struct info * head;
        head=NULL;
        printf("学生管理系统\n1.创建链表\n2.删除链表\n3.打印链表\n4.插入数据\n5.删除数据\n6.计算平均成绩\n7.按平均成绩排序\n8.退出系统\n请选择操作序号:");
        while(EOF!=scanf("%d",&n))
        {
                switch(n)
                {
                        case 1: create(&head);
                                printf("请选择操作序号:");
                                continue;
                        case 2: ruber_table(&head);
                                printf("请选择操作序号:");
                                continue;
                        case 3: print(head);
                                printf("请选择操作序号:");
                                continue;
                        case 4: insert_item(&head);
                                printf("请选择操作序号:");
                                continue;
                        case 5: ruber_item(&head);
                                printf("请选择操作序号:");
                                continue;
                        case 6: average(head);
                                printf("请选择操作序号:");
                                continue;
                        case 7: sort_table(&head);
                                printf("请选择操作序号:");
                                continue;
                        default: break;
                }
                break;
        }
        return 0;
}
void create(struct info **headp)
{
        struct info * loc_head=NULL,*tail;
        loc_head=(struct info *)malloc(sizeof(struct info));
        printf("请输入学生姓名(拼音):");
        getchar();
        gets(loc_head->name);
        tail=loc_head;
        while(*(tail->name))
        {
                printf("学号:");
                gets(tail->num);
                printf("性别(m/w):");
                tail->sex=getchar();
                printf("语文:");
                scanf("%d",&tail->chinese);
                printf("数学:");
                scanf("%d",&tail->math);
                printf("英语:");
                scanf("%d",&tail->english);
                tail->next=(struct info *)malloc(sizeof(struct info));
                tail=tail->next;
                printf("请输入学生姓名或按回车键结束:");
                getchar();
                gets(tail->name);
        }
        *headp=loc_head;
        tail->next=NULL;
}
void print(struct info *head)
{
        struct info * p=head;
        if(p==NULL){
                printf("暂无链表数据\n");return;}
        else
                printf("姓名             学号         性别  语文 数学 英语\n");
        while(*(p->name))
        {
                printf("%-15s  %-10s   %c     %d    %d    %d\n",
                p->name,p->num,p->sex,p->chinese,p->math,p->english);
                p=p->next;
        }
}
void ruber_table(struct info **headp)
{
        free(*headp);
        *headp=NULL;
        printf("成功删除链表\n");
}
void ruber_item(struct info **headp)
{
        if(*headp==NULL){
                printf("暂无链表数据\n");return;}
        char * numd;
        numd=(char *)malloc(20*sizeof(char));
        printf("请输入要删除信息的同学的学号：");
        scanf("%s",numd);
        struct info *p,*pre;
        p=*headp;
        while(strcmp(p->num,numd) && p->next!=NULL)
        {
                pre=p;
                p=p->next;
        }
        if(p->next==NULL)
                printf("没有该学生信息\n");
        else if(p==*headp)
        {
                pre=*headp;
                *headp=(*headp)->next;
                free(pre);
                if((*headp)->next==NULL)
                       (*headp)=NULL;
                printf("删除成功\n");
        }
        else
        {
                pre->next=p->next;
                free(p);
                printf("删除成功\n");
        }
        free(numd);
}
void insert_item(struct info **headp)
{
        if(*headp==NULL){
                printf("暂无链表数据\n");return;}
        char numd[20];
        printf("请输入要插入位置的前一名同学的学号:");
        scanf("%s",numd);
        struct info *current=*headp,*after,*other;
        while(strcmp(numd,current->num) && (current->next)!=NULL)
                current=current->next;
        if(current->next==NULL)
                printf("没有该学生信息\n");
        else
        {
                printf("请输入插入学生姓名(拼音)");
                other=(struct info *)malloc(sizeof(struct info));
                scanf("%s",other->name);
                printf("学号");
                scanf("%s",other->num);
                printf("性别(m\w)");
                getchar();
                other->sex=getchar();
                printf("语文:");
                scanf("%d",&other->chinese);
                printf("数学:");
                scanf("%d",&other->math);
                printf("英语:");
                scanf("%d",&other->english);
                other->next=current->next;
                current->next=other;
                printf("插入成功\n");
        }

}
void average(struct info * head)
{
        if(head==NULL)
                printf("暂无链表数据\n");
        else
        {
                struct info * p=head;
                while(p->next!=NULL)
                {
                        p->average=(p->chinese+p->math+p->english)/3.0;
                        p=p->next;
                }
                printf("姓名             学号         平均分\n");
                p=head;
                while(p->next!=NULL)
                {
                        printf("%-15s  %-10s   %.2f\n",p->name,p->num,p->average);
                        p=p->next;
                }
        }
}
sort_table(struct info**headp)
{
        if(*headp==NULL){
                printf("暂无链表数据\n");return;}
        struct info *prior1,*prior2,*p1,*p2,*t;
        p1=(struct info*)malloc(sizeof(struct info));
        p1->next=*headp;
        *headp=prior1=p1;
        for(p1=prior1->next;p1->next->next!=NULL;prior1=p1,p1=p1->next)
        {
                for(p2=p1->next,prior2=p1;p2->next!=NULL;prior2=p2,p2=p2->next)
                {
                        if(p1->average < p2->average)
                        {
                                t=p2->next;
                                prior1->next=p2;
                                prior2->next=p1;
                                p2->next=p1->next;
                                p1->next=t;
                                t=p1;p1=p2;p2=t;
                        }
                }
        }
        printf("排序完成\n");
        p1=*headp;
        *headp=p1->next;
        free(p1);
}
